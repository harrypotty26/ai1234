ASTAR

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <math.h>

typedef struct Edge Edge;
typedef struct Node Node;

struct Edge {
    Node* target;
    double cost;
};

struct Node {
    char name[3]; // To hold node names (e.g., A, B)
    Edge* neighbors;
    int neighborCount;
    double gCost; // Cost from start to this node
    double hCost; // Heuristic cost to the goal
    Node* parent;
};

// Initialize a node with its name and heuristic cost
Node* createNode(const char* name, double hCost) {
    Node* node = (Node*)malloc(sizeof(Node));
    if (!node) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    strcpy(node->name, name);
    node->hCost = hCost;
    node->gCost = INFINITY;
    node->neighbors = NULL;
    node->neighborCount = 0;
    node->parent = NULL;
    return node;
}

// Add an edge between two nodes
void addEdge(Node* from, Node* to, double cost) {
    from->neighbors = realloc(from->neighbors, sizeof(Edge) * (from->neighborCount + 1));
    if (!from->neighbors) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    from->neighbors[from->neighborCount].target = to;
    from->neighbors[from->neighborCount].cost = cost;
    from->neighborCount++;
}

// Reconstruct the path from the goal node
void reconstructPath(Node* goal) {
    if (goal == NULL) return;
    reconstructPath(goal->parent);
    printf("%s ", goal->name);
}

// Function to compare fCost for the priority queue
int compareNodes(const void* a, const void* b) {
    Node* nodeA = (Node*)a;
    Node* nodeB = (Node*)b;
    double fCostA = nodeA->gCost + nodeA->hCost;
    double fCostB = nodeB->gCost + nodeB->hCost;
    return (fCostA > fCostB) - (fCostA < fCostB);
}

// A* algorithm implementation
void aStar(Node* start, Node* goal) {
    Node* openList[100]; // Priority queue for open list
    int openListSize = 0;
    Node* closedList[100];
    int closedListSize = 0;

    start->gCost = 0;
    openList[openListSize++] = start;

    while (openListSize > 0) {
        qsort(openList, openListSize, sizeof(Node*), compareNodes);
        Node* current = openList[0];

        // If the goal node is reached
        if (current == goal) {
            printf("Path found: ");
            reconstructPath(goal);
            printf("\nTotal cost: %.2lf\n", goal->gCost);
            return;
        }

        // Remove current node from openList
        for (int i = 1; i < openListSize; i++) {
            openList[i - 1] = openList[i];
        }
        openListSize--;

        closedList[closedListSize++] = current;

        // Explore neighbors
        for (int i = 0; i < current->neighborCount; i++) {
            Node* neighbor = current->neighbors[i].target;
            double tentativeGCost = current->gCost + current->neighbors[i].cost;

            int inClosedList = 0;
            for (int j = 0; j < closedListSize; j++) {
                if (closedList[j] == neighbor) {
                    inClosedList = 1;
                    break;
                }
            }
            if (inClosedList) continue;

            if (tentativeGCost < neighbor->gCost) {
                neighbor->gCost = tentativeGCost;
                neighbor->parent = current;

                int inOpenList = 0;
                for (int j = 0; j < openListSize; j++) {
                    if (openList[j] == neighbor) {
                        inOpenList = 1;
                        break;
                    }
                }
                if (!inOpenList) {
                    openList[openListSize++] = neighbor;
                }
            }
        }
    }
    printf("No path found.\n");
}

int main() {
    int numNodes;
    printf("Enter the number of nodes: ");
    scanf("%d", &numNodes);

    // Allocate memory for nodes
    Node* nodes[numNodes];

    // Input node names and heuristic values
    for (int i = 0; i < numNodes; i++) {
        char name[3];
        double hCost;
        printf("Enter name and heuristic value for node %d (e.g., A 10): ", i + 1);
        scanf("%s %lf", name, &hCost);
        nodes[i] = createNode(name, hCost);
    }

    // Input adjacency matrix
    printf("Enter the adjacency matrix (cost 0 for no edge):\n");
    for (int i = 0; i < numNodes; i++) {
        for (int j = 0; j < numNodes; j++) {
            double cost;
            scanf("%lf", &cost);
            if (cost > 0) {
                addEdge(nodes[i], nodes[j], cost);
            }
        }
    }

    // Input start and goal nodes
    char startName[3], goalName[3];
    printf("Enter the start node: ");
    scanf("%s", startName);
    printf("Enter the goal node: ");
    scanf("%s", goalName);

    Node* start = NULL;
    Node* goal = NULL;

    for (int i = 0; i < numNodes; i++) {
        if (strcmp(nodes[i]->name, startName) == 0) {
            start = nodes[i];
        }
        if (strcmp(nodes[i]->name, goalName) == 0) {
            goal = nodes[i];
        }
    }

    if (!start || !goal) {
        printf("Invalid start or goal node.\n");
        for (int i = 0; i < numNodes; i++) {
            free(nodes[i]->neighbors);
            free(nodes[i]);
        }
        return 1;
    }

    // Run A* algorithm
    aStar(start, goal);

    // Free memory
    for (int i = 0; i < numNodes; i++) {
        free(nodes[i]->neighbors);
        free(nodes[i]);
    }

    return 0;
} 

input:
Enter the number of nodes: 5
Enter name and heuristic value for node 1 (e.g., A 10): A 10
Enter name and heuristic value for node 2 (e.g., A 10): B 5
Enter name and heuristic value for node 3 (e.g., A 10): C 3
Enter name and heuristic value for node 4 (e.g., A 10): D 7
Enter name and heuristic value for node 5 (e.g., A 10): E 0
Enter the adjacency matrix (cost 0 for no edge):
0 2 0 1 0
2 0 3 2 0
0 3 0 0 4
1 2 0 0 5
0 0 4 5 0
Enter the start node: A
Enter the goal node: E
Path found: A D E
Total cost: 6.00

AOSTAR

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#define MAX_NODES 100
#define MAX_CONDITIONS 10
#define MAX_NAME_LENGTH 10

typedef struct {
    char name[MAX_NAME_LENGTH];
    int cost;
} Node;

typedef struct {
    char or_nodes[MAX_CONDITIONS][MAX_NAME_LENGTH];
    int or_count;
    char and_nodes[MAX_CONDITIONS][MAX_NAME_LENGTH];
    int and_count;
} Condition;

Node nodes[MAX_NODES];
Condition conditions[MAX_NODES];
int node_count = 0;
int condition_count = 0;

// Function to get the cost of a node by its name
int get_node_cost(const char *name) {
    for (int i = 0; i < node_count; i++) {
        if (strcmp(nodes[i].name, name) == 0) {
            return nodes[i].cost;
        }
    }
    return INT_MAX; // Return a large value if node not found
}

// Function to calculate costs based on AND/OR conditions
int calculate_cost(const Condition *condition) {
    int total_cost = 0;

    // Calculate AND cost
    if (condition->and_count > 0) {
        for (int i = 0; i < condition->and_count; i++) {
            total_cost += get_node_cost(condition->and_nodes[i]);
        }
    }

    // Calculate OR cost
    if (condition->or_count > 0) {
        int min_or_cost = INT_MAX;
        for (int i = 0; i < condition->or_count; i++) {
            int cost = get_node_cost(condition->or_nodes[i]);
            if (cost < min_or_cost) {
                min_or_cost = cost;
            }
        }
        total_cost += min_or_cost;
    }

    return total_cost;
}

// Function to update the costs for all nodes based on conditions
void update_costs() {
    for (int i = 0; i < condition_count; i++) {
        int cost = calculate_cost(&conditions[i]);
        nodes[i].cost = cost;
        printf("Updated Cost for %s: %d\n", nodes[i].name, nodes[i].cost);
    }
}

// Function to print the shortest path
void print_shortest_path(const char *start) {
    for (int i = 0; i < node_count; i++) {
        if (strcmp(nodes[i].name, start) == 0) {
            printf("Shortest Path from %s: Cost = %d\n", start, nodes[i].cost);
            return;
        }
    }
    printf("Node %s not found!\n", start);
}

int main() {
    // Initialize nodes and their costs
    strcpy(nodes[node_count].name, "A"); nodes[node_count++].cost = 1;
    strcpy(nodes[node_count].name, "B"); nodes[node_count++].cost = 4;
    strcpy(nodes[node_count].name, "C"); nodes[node_count++].cost = 2;
    strcpy(nodes[node_count].name, "D"); nodes[node_count++].cost = 3;
    strcpy(nodes[node_count].name, "E"); nodes[node_count++].cost = 6;
    strcpy(nodes[node_count].name, "F"); nodes[node_count++].cost = 8;
    strcpy(nodes[node_count].name, "G"); nodes[node_count++].cost = 2;
    strcpy(nodes[node_count].name, "H"); nodes[node_count++].cost = 0;
    strcpy(nodes[node_count].name, "I"); nodes[node_count++].cost = 0;
    strcpy(nodes[node_count].name, "J"); nodes[node_count++].cost = 0;

    // Initialize conditions
    // A: OR(B), AND(C, D)
    strcpy(conditions[condition_count].or_nodes[0], "B");
    conditions[condition_count].or_count = 1;
    strcpy(conditions[condition_count].and_nodes[0], "C");
    strcpy(conditions[condition_count].and_nodes[1], "D");
    conditions[condition_count].and_count = 2;
    condition_count++;

    // B: OR(E, F)
    strcpy(conditions[condition_count].or_nodes[0], "E");
    strcpy(conditions[condition_count].or_nodes[1], "F");
    conditions[condition_count].or_count = 2;
    conditions[condition_count].and_count = 0; // No AND conditions
    condition_count++;

    // C: OR(G), AND(H, I)
    strcpy(conditions[condition_count].or_nodes[0], "G");
    conditions[condition_count].or_count = 1;
    strcpy(conditions[condition_count].and_nodes[0], "H");
    strcpy(conditions[condition_count].and_nodes[1], "I");
    conditions[condition_count].and_count = 2;
    condition_count++;

    // D: OR(J)
    strcpy(conditions[condition_count].or_nodes[0], "J");
    conditions[condition_count].or_count = 1;
    conditions[condition_count].and_count = 0; // No AND conditions
    condition_count++;

    printf("Updated Costs:\n");
    update_costs();
    printf("\n");

    print_shortest_path("A");

    return 0;
}
